{"ast":null,"code":"var _s = $RefreshSig$();\n\n//This custom fetch hook was developed while following the NetNinja tutorial and made sense to keep it\n// the helper function goes and does the fetch of a url - returns data, isPending if waiting and isError \n// if there is a problem with the fetch - i\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isError, setIsError] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  useEffect(() => {\n    const abortFetch = new AbortController();\n    fetch(url, {\n      signal: abortFetch.signal\n    }).then(res => {\n      if (!res.ok) {\n        throw Error(\"Did not get valid for that resource\");\n      }\n\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      setData(data);\n      setIsPending(false);\n      setIsError(null);\n    }).catch(err => {\n      console.log(err.message);\n\n      if (err.name === 'AbortError') {\n        console.log('Fetch Aborted');\n      } else {\n        setIsError(err.message);\n        setIsPending(false);\n      }\n    });\n    return () => abortFetch.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    isError\n  };\n};\n\n_s(useFetch, \"pr+kbiNppPdS0DiQ23Q0qJtDDpE=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/kwelch/MERN_BOOT_CAMP/homework/21-Homework/BookMarker/client/src/components/utils/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isError","setIsError","isPending","setIsPending","abortFetch","AbortController","fetch","signal","then","res","ok","Error","json","console","log","catch","err","message","name","abort"],"mappings":";;AAAA;AACA;AACA;AAEA,SAAQA,QAAR,EAAkBC,SAAlB,QAAmC,OAAnC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAU;AAAA;;AAEvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACIC,IAAAA,KAAK,CAACT,GAAD,EAAM;AAACU,MAAAA,MAAM,EAAEH,UAAU,CAACG;AAApB,KAAN,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,UAAG,CAACA,GAAG,CAACC,EAAR,EAAW;AACV,cAAMC,KAAK,CAAC,qCAAD,CAAX;AACA;;AACL,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACC,KANL,EAOKJ,IAPL,CAOYV,IAAD,IAAU;AACbe,MAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AACJC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAK,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACC,KAZL,EAaKc,KAbL,CAaYC,GAAD,IAAS;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAG,CAACC,OAAhB;;AACA,UAAGD,GAAG,CAACE,IAAJ,KAAa,YAAhB,EAA6B;AACzBL,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,OAFD,MAEO;AACPb,QAAAA,UAAU,CAACe,GAAG,CAACC,OAAL,CAAV;AACAd,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACC;AAEJ,KAtBL;AAyBJ,WAAO,MAAMC,UAAU,CAACe,KAAX,EAAb;AACH,GA5BQ,EA4BP,CAACtB,GAAD,CA5BO,CAAT;AA8BA,SAAO;AAACC,IAAAA,IAAD;AAAOI,IAAAA,SAAP;AAAkBF,IAAAA;AAAlB,GAAP;AACH,CAtCD;;GAAMJ,Q;;AAwCN,eAAeA,QAAf","sourcesContent":["//This custom fetch hook was developed while following the NetNinja tutorial and made sense to keep it\n// the helper function goes and does the fetch of a url - returns data, isPending if waiting and isError \n// if there is a problem with the fetch - i\n\nimport{ useState, useEffect } from 'react';\n\nconst useFetch = (url)  => {\n\n    const [data, setData] = useState(null);\n    const [isError, setIsError] = useState(null)\n    const [isPending, setIsPending] = useState(true);\n\n\n    useEffect(() => {\n        const abortFetch = new AbortController();\n            fetch(url, {signal: abortFetch.signal})\n                .then(res => {\n                    if(!res.ok){\n                     throw Error(\"Did not get valid for that resource\")\n                    }\n                return res.json()\n                })\n                .then ((data) => {\n                    console.log(data);\n                setData(data);\n                setIsPending(false);\n                setIsError(null);\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                    if(err.name === 'AbortError'){\n                        console.log('Fetch Aborted')\n                    } else {    \n                    setIsError(err.message);\n                    setIsPending(false);\n                    }\n\n                })\n        \n\n        return () => abortFetch.abort();\n    },[url]) \n\n    return {data, isPending, isError}\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}